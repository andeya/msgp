package test

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"bytes"
	"encoding/json"
	"testing"

	"github.com/henrylee2cn/msgp/msgp"
)

func TestMarshalUnmarshalTable2(t *testing.T) {
	v1 := Table{
		A: &GridView{"0000"},
		B: [5]msgp.Any{
			&GridView{"1111"},
			&GridView{"2222"},
			&GridView{"3333"},
			&GridView{"4444"},
		},
		C: []msgp.Any{
			&GridView{"5555"},
			&GridView{"6666"},
		},
		D: map[string]msgp.Any{
			"aaaa": &GridView{"7777"},
			"bbbb": &GridView{"8888"},
		},
		E: map[string][]msgp.Any{
			"cccc": {&GridView{"9999"}},
		},
	}
	b1, _ := json.Marshal(v1)
	t.Logf("send table: %s", b1)
	bts, err := v1.MarshalMsg(nil)
	if err != nil {
		t.Fatal(err)
	}
	v2 := Table{}
	// t.Logf("==============bts1:%s", string(bts))
	left, err := v2.UnmarshalMsg(bts)
	if err != nil {
		t.Fatal(err)
	}
	if len(left) > 0 {
		t.Errorf("%d bytes left over after UnmarshalMsg(): %q", len(left), left)
	}
	b2, _ := json.Marshal(v2)
	t.Logf("recv table: %s", b2)
	// t.Logf("==============bts2:%s", string(bts))

	left = bts
	for i := 0; i < 11; i++ {
		left, err = msgp.Skip(left)
		if err != nil {
			t.Fatal(err)
		}
	}
	if len(left) > 0 {
		t.Errorf("%d bytes left over after Skip(): %q", len(left), left)
	}
}
func TestMarshalUnmarshalTable(t *testing.T) {
	v := Table{}
	bts, err := v.MarshalMsg(nil)
	if err != nil {
		t.Fatal(err)
	}
	left, err := v.UnmarshalMsg(bts)
	if err != nil {
		t.Fatal(err)
	}
	if len(left) > 0 {
		t.Errorf("%d bytes left over after UnmarshalMsg(): %q", len(left), left)
	}

	left, err = msgp.Skip(bts)
	if err != nil {
		t.Fatal(err)
	}
	if len(left) > 0 {
		t.Errorf("%d bytes left over after Skip(): %q", len(left), left)
	}
}

func BenchmarkMarshalMsgTable(b *testing.B) {
	v := Table{}
	b.ReportAllocs()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		v.MarshalMsg(nil)
	}
}

func BenchmarkAppendMsgTable(b *testing.B) {
	v := Table{}
	bts := make([]byte, 0, v.Msgsize())
	bts, _ = v.MarshalMsg(bts[0:0])
	b.SetBytes(int64(len(bts)))
	b.ReportAllocs()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		bts, _ = v.MarshalMsg(bts[0:0])
	}
}

func BenchmarkUnmarshalTable(b *testing.B) {
	v := Table{}
	bts, _ := v.MarshalMsg(nil)
	b.ReportAllocs()
	b.SetBytes(int64(len(bts)))
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_, err := v.UnmarshalMsg(bts)
		if err != nil {
			b.Fatal(err)
		}
	}
}

func TestEncodeDecodeTable(t *testing.T) {
	v1 := Table{
		A: &GridView{"0000"},
		B: [5]msgp.Any{
			&GridView{"1111"},
			&GridView{"2222"},
			&GridView{"3333"},
			&GridView{"4444"},
		},
		C: []msgp.Any{
			&GridView{"5555"},
			&GridView{"6666"},
		},
		D: map[string]msgp.Any{
			"aaaa": &GridView{"7777"},
			"bbbb": &GridView{"8888"},
		},
		E: map[string][]msgp.Any{
			"cccc": {&GridView{"9999"}},
		},
	}
	b1, _ := json.Marshal(v1)
	t.Logf("send table: %s", b1)

	var buf bytes.Buffer
	msgp.Encode(&buf, &v1)

	m := v1.Msgsize()
	if buf.Len() > m {
		t.Logf("WARNING: Msgsize() for %v is inaccurate", v1)
	}

	vn := Table{}
	err := msgp.Decode(&buf, &vn)
	if err != nil {
		t.Error(err)
	}
	bn, _ := json.Marshal(vn)
	t.Logf("recv table: %s", bn)

	buf.Reset()
	msgp.Encode(&buf, &v1)
	err = msgp.NewReader(&buf).Skip()
	if err != nil {
		t.Error(err)
	}
}

func BenchmarkEncodeTable(b *testing.B) {
	v := Table{}
	var buf bytes.Buffer
	msgp.Encode(&buf, &v)
	b.SetBytes(int64(buf.Len()))
	en := msgp.NewWriter(msgp.Nowhere)
	b.ReportAllocs()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		v.EncodeMsg(en)
	}
	en.Flush()
}

func BenchmarkDecodeTable(b *testing.B) {
	v := Table{}
	var buf bytes.Buffer
	msgp.Encode(&buf, &v)
	b.SetBytes(int64(buf.Len()))
	rd := msgp.NewEndlessReader(buf.Bytes(), b)
	dc := msgp.NewReader(rd)
	b.ReportAllocs()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		err := v.DecodeMsg(dc)
		if err != nil {
			b.Fatal(err)
		}
	}
}
