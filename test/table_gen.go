package test

// Code generated by github.com/henrylee2cn/msgp DO NOT EDIT.

import (
	"github.com/henrylee2cn/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Table) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "A":
			z.A, err = msgp.DecodeAny(dc)
			if err != nil {
				return
			}
		case "B":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if zb0002 != uint32(5) {
				err = msgp.ArrayError{Wanted: uint32(5), Got: zb0002}
				return
			}
			for za0001 := range z.B {
				z.B[za0001], err = msgp.DecodeAny(dc)
				if err != nil {
					return
				}
			}
		case "C":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.C) >= int(zb0003) {
				z.C = (z.C)[:zb0003]
			} else {
				z.C = make([]msgp.Any, zb0003)
			}
			for za0002 := range z.C {
				z.C[za0002], err = msgp.DecodeAny(dc)
				if err != nil {
					return
				}
			}
		case "D":
			var zb0004 uint32
			zb0004, err = dc.ReadMapHeader()
			if err != nil {
				return
			}
			if z.D == nil {
				z.D = make(map[string]msgp.Any, zb0004)
			} else if len(z.D) > 0 {
				for key := range z.D {
					delete(z.D, key)
				}
			}
			for zb0004 > 0 {
				zb0004--
				var za0003 string
				var za0004 msgp.Any
				za0003, err = dc.ReadString()
				if err != nil {
					return
				}
				za0004, err = msgp.DecodeAny(dc)
				if err != nil {
					return
				}
				z.D[za0003] = za0004
			}
		case "E":
			var zb0005 uint32
			zb0005, err = dc.ReadMapHeader()
			if err != nil {
				return
			}
			if z.E == nil {
				z.E = make(map[string][]msgp.Any, zb0005)
			} else if len(z.E) > 0 {
				for key := range z.E {
					delete(z.E, key)
				}
			}
			for zb0005 > 0 {
				zb0005--
				var za0005 string
				var za0006 []msgp.Any
				za0005, err = dc.ReadString()
				if err != nil {
					return
				}
				var zb0006 uint32
				zb0006, err = dc.ReadArrayHeader()
				if err != nil {
					return
				}
				if cap(za0006) >= int(zb0006) {
					za0006 = (za0006)[:zb0006]
				} else {
					za0006 = make([]msgp.Any, zb0006)
				}
				for za0007 := range za0006 {
					za0006[za0007], err = msgp.DecodeAny(dc)
					if err != nil {
						return
					}
				}
				z.E[za0005] = za0006
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Table) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "A"
	err = en.Append(0x85, 0xa1, 0x41)
	if err != nil {
		return
	}
	err = msgp.EncodeAny(z.A, en)
	if err != nil {
		return
	}
	// write "B"
	err = en.Append(0xa1, 0x42)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(5))
	if err != nil {
		return
	}
	for za0001 := range z.B {
		err = msgp.EncodeAny(z.B[za0001], en)
		if err != nil {
			return
		}
	}
	// write "C"
	err = en.Append(0xa1, 0x43)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.C)))
	if err != nil {
		return
	}
	for za0002 := range z.C {
		err = msgp.EncodeAny(z.C[za0002], en)
		if err != nil {
			return
		}
	}
	// write "D"
	err = en.Append(0xa1, 0x44)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.D)))
	if err != nil {
		return
	}
	for za0003, za0004 := range z.D {
		err = en.WriteString(za0003)
		if err != nil {
			return
		}
		err = msgp.EncodeAny(za0004, en)
		if err != nil {
			return
		}
	}
	// write "E"
	err = en.Append(0xa1, 0x45)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.E)))
	if err != nil {
		return
	}
	for za0005, za0006 := range z.E {
		err = en.WriteString(za0005)
		if err != nil {
			return
		}
		err = en.WriteArrayHeader(uint32(len(za0006)))
		if err != nil {
			return
		}
		for za0007 := range za0006 {
			err = msgp.EncodeAny(za0006[za0007], en)
			if err != nil {
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Table) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "A"
	o = append(o, 0x85, 0xa1, 0x41)
	o, err = msgp.MarshalAny(z.A, o)
	if err != nil {
		return
	}
	// string "B"
	o = append(o, 0xa1, 0x42)
	o = msgp.AppendArrayHeader(o, uint32(5))
	for za0001 := range z.B {
		o, err = msgp.MarshalAny(z.B[za0001], o)
		if err != nil {
			return
		}
	}
	// string "C"
	o = append(o, 0xa1, 0x43)
	o = msgp.AppendArrayHeader(o, uint32(len(z.C)))
	for za0002 := range z.C {
		o, err = msgp.MarshalAny(z.C[za0002], o)
		if err != nil {
			return
		}
	}
	// string "D"
	o = append(o, 0xa1, 0x44)
	o = msgp.AppendMapHeader(o, uint32(len(z.D)))
	for za0003, za0004 := range z.D {
		o = msgp.AppendString(o, za0003)
		o, err = msgp.MarshalAny(za0004, o)
		if err != nil {
			return
		}
	}
	// string "E"
	o = append(o, 0xa1, 0x45)
	o = msgp.AppendMapHeader(o, uint32(len(z.E)))
	for za0005, za0006 := range z.E {
		o = msgp.AppendString(o, za0005)
		o = msgp.AppendArrayHeader(o, uint32(len(za0006)))
		for za0007 := range za0006 {
			o, err = msgp.MarshalAny(za0006[za0007], o)
			if err != nil {
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Table) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "A":
			z.A, bts, err = msgp.UnmarshalAny(bts)
			if err != nil {
				return
			}
		case "B":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				return
			}
			if zb0002 != uint32(5) {
				err = msgp.ArrayError{Wanted: uint32(5), Got: zb0002}
				return
			}
			for za0001 := range z.B {
				z.B[za0001], bts, err = msgp.UnmarshalAny(bts)
				if err != nil {
					return
				}
			}
		case "C":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				return
			}
			if cap(z.C) >= int(zb0003) {
				z.C = (z.C)[:zb0003]
			} else {
				z.C = make([]msgp.Any, zb0003)
			}
			for za0002 := range z.C {
				z.C[za0002], bts, err = msgp.UnmarshalAny(bts)
				if err != nil {
					return
				}
			}
		case "D":
			var zb0004 uint32
			zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				return
			}
			if z.D == nil {
				z.D = make(map[string]msgp.Any, zb0004)
			} else if len(z.D) > 0 {
				for key := range z.D {
					delete(z.D, key)
				}
			}
			for zb0004 > 0 {
				var za0003 string
				var za0004 msgp.Any
				zb0004--
				za0003, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					return
				}
				za0004, bts, err = msgp.UnmarshalAny(bts)
				if err != nil {
					return
				}
				z.D[za0003] = za0004
			}
		case "E":
			var zb0005 uint32
			zb0005, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				return
			}
			if z.E == nil {
				z.E = make(map[string][]msgp.Any, zb0005)
			} else if len(z.E) > 0 {
				for key := range z.E {
					delete(z.E, key)
				}
			}
			for zb0005 > 0 {
				var za0005 string
				var za0006 []msgp.Any
				zb0005--
				za0005, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					return
				}
				var zb0006 uint32
				zb0006, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					return
				}
				if cap(za0006) >= int(zb0006) {
					za0006 = (za0006)[:zb0006]
				} else {
					za0006 = make([]msgp.Any, zb0006)
				}
				for za0007 := range za0006 {
					za0006[za0007], bts, err = msgp.UnmarshalAny(bts)
					if err != nil {
						return
					}
				}
				z.E[za0005] = za0006
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Table) Msgsize() (s int) {
	s = 1 + 2 + msgp.Anysize(z.A) + 2 + msgp.ArrayHeaderSize
	for za0001 := range z.B {
		s += msgp.Anysize(z.B[za0001])
	}
	s += 2 + msgp.ArrayHeaderSize
	for za0002 := range z.C {
		s += msgp.Anysize(z.C[za0002])
	}
	s += 2 + msgp.MapHeaderSize
	if z.D != nil {
		for za0003, za0004 := range z.D {
			_ = za0004
			s += msgp.StringPrefixSize + len(za0003) + msgp.Anysize(za0004)
		}
	}
	s += 2 + msgp.MapHeaderSize
	if z.E != nil {
		for za0005, za0006 := range z.E {
			_ = za0006
			s += msgp.StringPrefixSize + len(za0005) + msgp.ArrayHeaderSize
			for za0007 := range za0006 {
				s += msgp.Anysize(za0006[za0007])
			}
		}
	}
	return
}
